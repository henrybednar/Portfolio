# -*- coding: utf-8 -*-
"""Web Scraping Project Graphs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16jJqY3KNIYTF_Ts64hUhV4xOcQ_2mQ2q
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("/content/UPDATED_happiness_data_4_2_24.csv", sep=",")

df.head()

import re

correlation_df = df.loc[:, df.columns!='country']

def remove_non_numeric(text):
    return re.sub(r'[^0-9]', '', text)

# Apply the function to the column
correlation_df['gdp_per_capita_2022'] = correlation_df['gdp_per_capita_2022'].apply(remove_non_numeric)
correlation_df['population_2022'] = correlation_df['population_2022'].apply(remove_non_numeric)

correlation_df.corr()

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['avg_daily_income_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import re

# Assuming you have a DataFrame named 'df'

def remove_non_numeric(text):
    return re.sub(r'[^0-9.]', '', text)  # Include '.' to allow decimal points

# Apply the function to the column and convert to numeric
df['gdp_per_capita_2022'] = pd.to_numeric(df['gdp_per_capita_2022'].apply(remove_non_numeric), errors='coerce')

# Drop rows with NaN values in 'gdp_per_capita_2022' column
df = df.dropna(subset=['gdp_per_capita_2022'])

x_data, y_data = df['gdp_per_capita_2022'], df['whr_happiness_score_2022']
fig, axs = plt.subplots(1, 2, figsize=(12, 3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color': 'red'}, ax=axs[1])
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import re

# Assuming you have a DataFrame named 'df'

def remove_non_numeric(text):
    return re.sub(r'[^0-9.]', '', text)  # Include '.' to allow decimal points

# Apply the function to the column and convert to numeric
df['population_2022'] = pd.to_numeric(df['population_2022'].apply(remove_non_numeric), errors='coerce')

# Drop rows with NaN values in 'gdp_per_capita_2022' column
df = df.dropna(subset=['population_2022'])

x_data, y_data = df['population_2022'], df['whr_happiness_score_2022']
fig, axs = plt.subplots(1, 2, figsize=(12, 3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color': 'red'}, ax=axs[1])
plt.show()

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['median_age_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['life_expectancy_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['co2_emissions_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['military_expenditure_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['child_mortality_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['income_inequality_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['inflation_percentage_2022'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);

#ACTUAL GRAPH

import matplotlib.pyplot as plt
import seaborn as sns


x_data, y_data = df['gender_development_index_2018'],df['whr_happiness_score_2022']
fig, axs = plt.subplots(1,2, figsize=(12,3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color':'red'}, ax=axs[1]);



#BELOW MEDIAN HAPPINESS GRAPH

import matplotlib.pyplot as plt
import seaborn as sns

below_med_happiness = df[df['whr_happiness_score_2022'] < 56.6]

x_data, y_data = below_med_happiness['median_age_2022'], below_med_happiness['whr_happiness_score_2022']
fig, axs = plt.subplots(1, 2, figsize=(12, 3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color': 'red'}, ax=axs[1])
plt.show()

#ABOVE MEDIAN HAPPINESS GRAPH

import matplotlib.pyplot as plt
import seaborn as sns

above_med_happiness = df[df['whr_happiness_score_2022'] > 56.6]

x_data, y_data = above_med_happiness['median_age_2022'], above_med_happiness['whr_happiness_score_2022']
fig, axs = plt.subplots(1, 2, figsize=(12, 3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color': 'red'}, ax=axs[1])
plt.show()

#RANDOM GRAPH

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

min1 = 18.6
max1 = 78
mean1 = 55.1
std1 = 11.3
samples1 = 121

min2 = 14.5
max2 = 48.7
mean2 = 30.1
std2 = 9.61
samples2 = 121

# Generate random numbers with a normal distribution for happiness score within the specified range
random_numbers1 = np.clip(np.random.normal(mean1, std1, samples1), min1, max1)

# Generate random numbers with a normal distribution for median age within the specified range
random_numbers2 = np.clip(np.random.normal(mean2, std2, samples2), min2, max2)

# Create DataFrames from the random numbers
random_happiness = pd.DataFrame({'whr_happiness_score_2022': random_numbers1})
random_med_age = pd.DataFrame({'median_age_2022': random_numbers2})

# Plotting
x_data, y_data = random_med_age['median_age_2022'], random_happiness['whr_happiness_score_2022']
fig, axs = plt.subplots(1, 2, figsize=(12, 3))
axs[0].scatter(x_data, y_data)
sns.regplot(x=x_data, y=y_data, ci=False, line_kws={'color': 'red'}, ax=axs[1])
plt.show()

mean = 55.1
std = 11.3
samples = 121

random_numbers = np.random.normal(mean, std, samples)

random_numbers_df = pd.DataFrame({'whr_happiness_score_2022': random_numbers})

above_med_happiness = random_numbers_df[random_numbers_df['whr_happiness_score_2022'] > 56.6]

ordered_df = above_med_happiness.sort_values(by='whr_happiness_score_2022', ascending=False)

print(ordered_df)

ordered_df.count()

mean = 55.1
std = 11.3
samples = 121

random_numbers = np.random.normal(mean, std, samples)

random_numbers_df = pd.DataFrame({'whr_happiness_score_2022': random_numbers})

below_med_happiness = random_numbers_df[random_numbers_df['whr_happiness_score_2022'] < 56.6]

ordered_df = below_med_happiness.sort_values(by='whr_happiness_score_2022', ascending=True)

print(ordered_df)

ordered_df.count()